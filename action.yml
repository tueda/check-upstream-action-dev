name: Check Upstream
description: |
  Check upstream and create a pull request if merge is possible,
  or open an issue when conflicts are detected.

branding:
  icon: git-merge
  color: blue

inputs:
  upstream-repository:
    description: |
      The upstream repository to check against.
      For example, 'https://github.com/owner/repo.git' or 'owner/repo'
    required: true

  upstream-branch:
    description: |
      The upstream branch to check against.
      The default is the default branch of the upstream repository.
    default: ''

  merge-commit-message:
    description: The commit message for the merge commit.
    default: |
      Merge branch '$upstream_branch' from upstream '$upstream_repository'

      $upstream_commit_url

  pull-request-title:
    description: The title for the pull request.
    default: '[check-upstream] Merge changes from upstream'

  pull-request-branch:
    description: The branch name for the pull request.
    default: create-pull-request/check-upstream

  issue-title:
    description: The title for the issue when conflicts are detected.
    default: '[check-upstream] Merge conflicts with upstream'

  author:
    description: The author name and email address for the merge commit.
    default: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'

  committer:
    description: The committer name and email address for the merge commit.
    default: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'

runs:
  using: composite
  steps:
    - name: Configuration
      id: config
      shell: bash
      run: |
        if [ -d .git ]; then
          echo "initialized=true" >>"$GITHUB_OUTPUT"
        else
          echo "initialized=false" >>"$GITHUB_OUTPUT"
        fi
        if [[ "${{ inputs.upstream-repository }}" == http* ]]; then
          echo "upstream_url=${{ inputs.upstream-repository }}" >>"$GITHUB_OUTPUT"
        else
          echo "upstream_url=https://github.com/${{ inputs.upstream-repository }}.git" >>"$GITHUB_OUTPUT"
        fi
        author="${{ inputs.author }}"
        author_name="${author%% <*}"
        author_email="${author#*<}"
        author_email="${author_email%>}"
        committer="${{ inputs.committer }}"
        committer_name="${committer%% <*}"
        committer_email="${committer#*<}"
        committer_email="${committer_email%>}"
        echo "author_name=$author_name" >>"$GITHUB_OUTPUT"
        echo "author_email=$author_email" >>"$GITHUB_OUTPUT"
        echo "committer_name=$committer_name" >>"$GITHUB_OUTPUT"
        echo "committer_email=$committer_email" >>"$GITHUB_OUTPUT"

    - name: Checkout the repository
      if: steps.config.outputs.initialized == 'false'
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Fetch upstream
      id: fetch
      shell: bash
      run: |
        upstream_repository="${{ inputs.upstream-repository }}"
        upstream_url="${{ steps.config.outputs.upstream_url }}"
        git remote add upstream "$upstream_url"
        git fetch upstream
        if [ -z "${{ inputs.upstream-branch }}" ]; then
          upstream_branch=$(git ls-remote --symref upstream HEAD | sed -n 's|^ref: refs/heads/\([^[:space:]]*\).*|\1|p')
        else
          upstream_branch="${{ inputs.upstream-branch }}"
        fi
        upstream_sha=$(git rev-parse "upstream/$upstream_branch")
        upstream_short_sha=$(git rev-parse --short "upstream/$upstream_branch")
        upstream_branch_url="${upstream_url%.git}/tree/$upstream_branch"
        upstream_commit_url="${upstream_url%.git}/commit/$upstream_sha"

        export upstream_repository
        export upstream_url
        export upstream_branch
        export upstream_sha
        export upstream_short_sha
        export upstream_branch_url
        export upstream_commit_url
        variables='$upstream_repository $upstream_url $upstream_branch $upstream_sha $upstream_short_sha $upstream_branch_url $upstream_commit_url'

        cat <<'__CHECK_UPSTREAM_END__' | envsubst "$variables" >/tmp/merge_commit_message.txt
        ${{ inputs.merge-commit-message }}
        __CHECK_UPSTREAM_END__

        pull_request_title=$(envsubst "$variables" <<'__CHECK_UPSTREAM_END__'
        ${{ inputs.pull-request-title }}
        __CHECK_UPSTREAM_END__
        )
        echo "pull_request_title=$pull_request_title" >>"$GITHUB_OUTPUT"

        {
          echo 'pull_request_body<<__CHECK_UPSTREAM_END__'
          echo 'This pull request merges changes from the upstream repository.'
          echo
          echo "Upstream repository: [$upstream_repository]($upstream_url)  "
          echo "Upstream branch: [$upstream_branch]($upstream_branch_url)  "
          echo "Upstream commit: [$upstream_short_sha]($upstream_commit_url)"
          echo '__CHECK_UPSTREAM_END__'
        } >>"$GITHUB_OUTPUT"

        issue_title=$(envsubst "$variables" <<'__CHECK_UPSTREAM_END__'
        ${{ inputs.issue-title }}
        __CHECK_UPSTREAM_END__
        )
        echo "issue_title=$issue_title" >>"$GITHUB_OUTPUT"

        issue_search_title=$(cat <<'__CHECK_UPSTREAM_END__'
        ${{ inputs.issue-title }}
        __CHECK_UPSTREAM_END__
        )
        issue_search_title="${issue_search_title%%\$*}"
        echo "issue_search_title=$issue_search_title" >>"$GITHUB_OUTPUT"

    - name: Merge upstream
      id: merge
      shell: bash
      run: |
        if git merge upstream/main -F /tmp/merge_commit_message.txt; then
          echo "conflict=false" >>"$GITHUB_OUTPUT"
        else
          echo "conflict=true" >>"$GITHUB_OUTPUT"
          {
            echo "### Merge conflict when merging [$upstream_repository@$upstream_short_sha]($upstream_commit_url)"
            echo
            echo '#### git status'
            echo
            echo '~~~~~~~~'
            git status
            echo '~~~~~~~~'
            echo
            echo '#### git diff'
            echo
            echo '~~~~~~~~'
            git diff
            echo '~~~~~~~~'
          } >/tmp/conflict-issue-message.md
          git merge --abort
        fi
      env:
        GIT_AUTHOR_NAME: ${{ steps.config.outputs.author_name }}
        GIT_AUTHOR_EMAIL: ${{ steps.config.outputs.author_email }}
        GIT_COMMITTER_NAME: ${{ steps.config.outputs.committer_name }}
        GIT_COMMITTER_EMAIL: ${{ steps.config.outputs.committer_email }}

    - name: Create a pull request
      uses: peter-evans/create-pull-request@v7
      with:
        committer: ${{ inputs.committer }}
        author: ${{ inputs.author }}
        branch: ${{ inputs.pull-request-branch }}
        delete-branch: true
        title: ${{ steps.fetch.outputs.pull_request_title }}
        body: ${{ steps.fetch.outputs.pull_request_body }}

    - name: Find an opened merge conflict issue
      id: find_issue
      uses: actions/github-script@v8
      with:
        result-encoding: string
        script: |
          const issueSearchTitle = "${{ steps.fetch.outputs.issue_search_title }}";
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 100,
          });
          const found = issues.find(issue => issue.title.startsWith(issueSearchTitle));
          return found ? found.number : 0
